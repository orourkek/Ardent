<?php
namespace Ardent;

class CallbackMock {
    function __invoke() {
        return func_get_args();
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-16 at 17:08:21.
 */
class MappingIteratorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Traversable
     */
    protected $dataIterator;

    /**
     * @var array
     */
    protected $data;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->data = range(0,10);
        $this->dataIterator = new \ArrayIterator($this->data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    /**
     * @covers Ardent\MappingIterator::__construct
     * @covers Ardent\MappingIterator::next
     * @covers Ardent\MappingIterator::current
     */
    public function test__constructWithNoAdditionalArgs() {
        $callable = $this->getMock('Ardent\\CallableMock', array('__invoke'));

        $iterable = new MappingIterator($this->dataIterator, $callable);

        $callable->expects($this->exactly(count($this->data)))
            ->method('__invoke')
            ->with(
                $this->isType('int'),
                $this->isType('int')
            )
            ->will($this->returnCallback(new CallbackMock));

        foreach ($iterable as $key => $value) {
            $this->assertTrue(is_array($value));
            $this->assertEquals(array($key, $this->data[$key]), $value);
        }
    }

    public function testWithAdditionalArgs() {
        $callable = $this->getMock('Ardent\\CallableMock', array('__invoke'));

        $iterable = new MappingIterator($this->dataIterator, $callable, ['arg2', 'arg3']);

        $callable->expects($this->exactly(count($this->data)))
            ->method('__invoke')
            ->with(
                $this->isType('int'),
                $this->isType('int'),
                $this->isType('string'),
                $this->isType('string')
            )
            ->will($this->returnCallback(new CallbackMock));

        foreach ($iterable as $key => $value) {
            $this->assertTrue(is_array($value));
            $this->assertEquals(array($key, $this->data[$key], 'arg2', 'arg3'), $value);
        }
    }

}

